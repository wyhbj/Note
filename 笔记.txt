1.JS简介：页面组成：
			html -- 结构
			css  -- 样式
			js   -- 行为
	js:JavaScript
	布兰德.艾奇
	js组成：
		ECMAScript(5.1) -- Js基本语法组成
		DOM(文档对象模型) -- 操作页面的方法
		BOM(浏览器对象模型) -- 浏览器相关的方法
	作用：页面交互，修改css样式，与服务器通信
	onclick鼠标点击事件
	alert()调用浏览器默认弹窗
	()：函数或者方法执行
	js行间：<input type="button" style="width:100px;height:100px" value="按钮" onclick="alert('你好')"/>
		优点：直接
		缺点：不方便修改，维护，扩展，复用
	内嵌js：
		优点：方便同一页面复用
		1.推荐script放在body结束标签上边
		2.放在head里，因为代码从上往下逐行解析，页面结构还没加载完，所以获取不到元素
		解决方法：window.onload=function(){
				代码写这里
			}
			window.onload
				页面加载完事件
			
			；：一行代码结束
	js外链：
		问题同内嵌js
		优点：任意页面可以复用
	
	变量
		var 变量名 = 数据；
		作用：存储数据，方便数据复用，简化代码
		变量初始化
		 	var 变量名 = 数据；
		 	声明变量
		 		var 变量名；
		 	变量赋值
		 		变量名 = 数据；
			命名规则
			 	1.可以使用字母，数字，下划线_,美元符$
			 	2.第一位不允许是数字
			 	3.不允许用关键字和保留字
			 	4.区分大小写，长度可以任意
			 建议
			 	1.语义化
			 		o - 一个对象
			 		a - 一组元素
			 		n - 数字
			 		str - 字符串
			 		arr - 数组
			 		fn - 函数
			 	2.小驼峰命名法
			 		除了首个单词，后边每个单词首字母大写
	函数
		function 函数名(){}
			 作用：
			 	和变量类似，复用代码
		匿名函数
		 	声明：
		 	1.匿名函数不能直接声明，否则会报错
		 	2.直接写在事件后边
		 	3.var fn = function(){}
		 		调用:
		 			1.事件调用
		 			2.变量名() -- fn()
		有名函数
		 	function 函数名(){}
		 		声明：
		 			1.直接声明
		 		调用：
		 			1.直接调用 -- 函数名()
		 			2.事件调用
		 		注意：函数名后不加括号，不然没点，就执行了 btn.onclick = fn;//函数不加括号，不然还没点，就执行了
 	调用浏览器控制台
		console.log()
	属性操作
		元素.style.样式名 = '值'
		属性操作操作的是行间样式，可读可写
			 		
		1.通过.的方式操作属性 console.log(div.style.width)
			如果样式名不符合命名规范，带- console.log(div.style.background-color)//报错
			解决方法：
			 	1.用['样式名']，注意要加引号 console.log(div.style['background-color'])  
			 	2.去掉-，后边单词首字母大写  console.log(div.style.backgroundColor)
		2.通过[]的方式  console.log(div.style['background-color'])
			注意：
			 复合样式，谷歌和火狐下，获取有区别
	常用属性
		 id
		 class -- className
		 style
		 innerHTML
		 	标签对中间的所有内容，包括子标签，行间属性
		 innerText
		 	标签中的文字内容，不会识别标签
		 style.cssText
	连接符+
		1.两边都是数字，进行加法运算       console.log(1+1)//2
		2.两边都是字符串，进行字符串拼接   console.log('1'+'1')//11
		3.有一边是字符串，就进行字符串拼接 console.log(1+'1')//11
		如果两边有变量，先转成变量存的数据类型，再按照上述执行
	if条件判断
		1.if(判断条件){
			 如果判断条件为真，执行这里的代码
		}
		2.if(判断条件){
			 如果判断条件为真，执行的代码
		}else{
			如果判断条件为假，执行的代码
		}
		3.if(判断条件1){
			如果判断条件1为真，执行的代码
		}else if(判断条件2){
			 如果判断条件2为真，执行的代码
		}else{
			判断条件1和条件2都为假，执行的代码
		}
		布尔值boolean：
			真            假
			true    false
		==:比较两边的值是否相等，相等返回真，不等返回假
		数组
			作用：储存多个数据
			var arr = [];
			1.值与值之间用逗号分隔，注意最后一位后边别加逗号
			2.数组下标数字从0开始,取值arr[0]
			3.length,数据的个数,arr.length,最后一位arr[arr.length-1]
2.获取元素
	 css选择器
		id -- #
		class -- .
		标签名 -- div
	js选择器
		1.id方式
			document.getElementById(''id名称')
		2.class方式
			document.getElementsByClassName('class名')
			元素.getElementsByClassName('class名')
			document和元素限制范围，在范围内，获取指定class名的元素
			获取到的是一个集合，类数组，length获取到元素的个数，数字下标取值，如果只有一个元素，也必须加[0]操作元素
		3.标签名方式
			document.getElementsByTagName('标签名')
			元素.getElementsByTagName('标签名')
			document和元素限制范围，在范围内，获取指定标签名的元素
			获取到的是一个集合，类数组，length获取到元素的个数，数字下标取值，如果只有一个元素，也必须加[0]操作元素
	css选择器
		document.querySelector('css选择器')
		元素.querySelector('css选择器')
		获取到的是一个元素，即使通过标签名或者class，应该获取到一组元素，也只能获取到第一个
		 	
		document.querySelectorAll('css选择器')
		元素.querySelectorAll('css选择器')
		获取到的是一组元素，数字下标取值，length
for循环
	for(初始化变量;判断条件;变量改变){
		 重复执行的代码
	}
	过程：
	1.初始化变量 -- 声明变量i,赋值为0（只执行了一次）
	2.判断条件 -- 判断i是否满足条件，i<6成立，才会执行循环里的代码
	3.逐行执行括号里的代码
	4.变量改变 -- i++，i自增1
	5.判断条件
	6.括号里代码执行
	7.变量改变。。。。。
	注意：
	1.判断条件决定了for是否执行，执行多少次
	2.变量一定要改变，不然就死循环了
	
	取余，取模  %
		1.a < b -> a=2,b=4
			a%b = a
			2%4
		2.a > b
			a%b = a/b余下的数
		3.a = b或a是b的整数倍
			a%b = 0

	